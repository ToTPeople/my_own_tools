$#include "core/KeyFrame.h"
$using namespace media;

enum InterpolationType {
  BEZIER,   ///< Bezier curves are quadratic curves, which create a smooth curve.
  LINEAR,   ///< Linear curves are angular, straight lines between two points.
  CONSTANT  ///< Constant curves jump from their previous position to a new one (with no interpolation).
};

namespace media {

typedef long long   int64_t;

class Keyframe {

  std::vector<Point> Points;			///< Vector of all Points
  std::vector<Coordinate> Values;		///< Vector of all Values (i.e. the processed coordinates from the curve)

  /// Default constructor for the Keyframe class
  Keyframe();

  /// Constructor which sets the default point & coordinate at X=0
  Keyframe(double value);

  /// Add a new point on the key-frame.  Each point has a primary coordinate, a left handle, and a right handle.
  void AddPoint(Point p);

  /// Add a new point on the key-frame, with some defaults set (BEZIER)
  void AddPoint(double x, double y);

  /// Add a new point on the key-frame, with a specific interpolation type
  void AddPoint(double x, double y, InterpolationType interpolate);

  /// Does this keyframe contain a specific point
  bool Contains(Point p);

  /// Flip all the points in this openshot::Keyframe (useful for reversing an effect or transition, etc...)
  void FlipPoints();

  /// Get the index of a point by matching a coordinate
  int64_t FindIndex(Point p);

  /// Get the value at a specific index
  double GetValue(int64_t index);

  /// Get the rounded INT value at a specific index
  int GetInt(int64_t index);

  /// Get the rounded LONG value at a specific index
  int64_t GetLong(int64_t index);

  /// Get the fraction that represents how many times this value is repeated in the curve
  Fraction GetRepeatFraction(int64_t index);

  /// Get the change in Y value (from the previous Y value)
  double GetDelta(int64_t index);

  /// Get a point at a specific index
  Point& GetPoint(int64_t index);

  /// Get current point (or closest point to the right) from the X coordinate (i.e. the frame number)
  Point GetClosestPoint(Point p);

  /// Get current point (or closest point) from the X coordinate (i.e. the frame number)
  /// Either use the closest left point, or right point
  Point GetClosestPoint(Point p, bool useLeft);

  /// Get previous point (
  Point GetPreviousPoint(Point p);

  /// Get max point (by Y coordinate)
  Point GetMaxPoint();

  // Get the number of values (i.e. coordinates on the X axis)
  int64_t GetLength();

  /// Get the number of points (i.e. # of points)
  int64_t GetCount();

  /// Get the direction of the curve at a specific index (increasing or decreasing)
  bool IsIncreasing(int index);

  /// Get and Set JSON methods
  string Json(); ///< Generate JSON string of this object
  Json::Value JsonValue(); ///< Generate Json::JsonValue for this object
  void SetJson(string value); ///< Load JSON string into this object
  void SetJsonValue(Json::Value root); ///< Load Json::JsonValue into this object

  /**
   * @brief Calculate all of the values for this keyframe.
   *
   * This clears any existing data in the "values" vector.  This method is automatically called
   * by AddPoint(), so you don't typically need to call this method.
   */
  void Process();

  /// Remove a point by matching a coordinate
  void RemovePoint(Point p);

  /// Remove a point by index
  void RemovePoint(int64_t index);

  /// Scale all points by a percentage (good for evenly lengthening or shortening an openshot::Keyframe)
  /// 1.0 = same size, 1.05 = 5% increase, etc...
  void ScalePoints(double scale);

  /// Replace an existing point with a new point
  void UpdatePoint(int64_t index, Point p);

  /// Print a list of points
  void PrintPoints();

  /// Print just the Y value of the point's primary coordinate
  void PrintValues();

};

} // end media
